load("~/Code/R/PreparacionSegundoExamenParcial/NatalRiskData.rData")
package("rpart")
library("rpart")
library("rpart.plot")
load("Arboles de decision/GCDData(1).RData")
model <- rpart(Good.Loan ~ Duration.in.month)
model
rpart.plot(model, type = 1, extra = 100, cex = .7, box.col=c("gray99", "gray88")[model$frame$yval])
model <- rpart(Good.Loan ~ Duration.in.month + installment.rate.in.percentage.of.disposable.income +
Credit.amount + Other.installment.plans,
data = d,
control = rpart.control(maxdepth = 4),
method = "class")
sdta
sdata
summary(sdata)
tatable(d$Purpose, d$Good.Loan)
table(d$Purpose, d$Good.Loan)
d$Purpose
summary(d$Purpose)
summary(d$Good.
CCCCQWEPQW
summary(d$Good.Loan)
d$Good.Loan
table(d$Purpose, d$Good.Loan)
resultframe <- data.frame(Good.Loan = creditdata$Good.Loan, pred = predict(model, type="class"))
rtab <- table(resultframe)
rtab
diag(rtab)
sum(diag(rtab))
sum(diag(rtab))/sum(rtab)
rtab[1,1]
rtab[1,2]
rtab[1,3]
rtab
rtab[,1]
rtab[1,]
rtab[,1]
sum(rtab[1,1] / sum(rtab[,1]))
sum(rtab[1,1]) / sum(rtab[,1])
sum(rtab[1,1]) / sum(rtab[1,])
sum(rtab[2,1]) / sum(rtab[2,])
library(C50)
library(rpart)
library(rpart.plot)
data(churn)
summary(churn)
Variables <- c(4,7,16,19,17,20)
Variables
Entrenamiento <- churnTrain[,Variables]
Entrenamiento
summary(Entrenamiento)
churnTrain
Test <- churnTest[,Variables]
Test
d
summary(d)
summary(churnTrain)
dim(churnTrain)
Variables
d$Good.Loan
summary(d$Good.Loan)
summary(d$Purpose)
table(d$Purpose, d$Good.Loan)
rtab
sum(rtab[1,1]) / sum(rtab[1,])
rtab[1,1]
sum(rtab[1,])
sum(rtab[2,1]) / sum(rtab[2,])
rtab[2,1]
ModeloArbol <- rpart(churn ~., data = Entrenamiento, params = list(split="information") )
ModeloArbol
library(C50)
library(rpart)
library(rpart.plot)
# Cargar tablas
data(churn)
# Variables elegidas
Variables <- c(4,7,16,19,17,20)
# Scando las variables basado en numeros
Entrenamiento <- churnTrain[,Variables]
Test <- churnTest[,Variables]
ModeloArbol <- rpart(churn ~., data = Entrenamiento, params = list(split="information") )
ModeloArbol
ModeloArbol <- rpart(churn ~., data = Entrenamiento, params = list(split="information") )
ModeloArbol<-rpart(churn ~ .,data=Entrenamiento,parms=list(split="information"))
ModeloArbol
rpart.plot(ModeloArbol, type = 1, extra = 100, cex = .7, box.col = c("gray99", "gray88")[ModeloArbol$frame$yval])
prediccion <- predict(ModeloArbol, Test, type = "class")
MC  <
-
table(Test[, "churn"],
Prediccion
) MC  <-table(Test[, "churn"],Prediccion)
MC  <-table(Test[, "churn"],Prediccion)
MC  <-table(Test[, "churn"],prediccion)
Variables <- c(4,7,16,19,17,20)
datos <- churnTrain[, Variables]
datos <- rbind(datos, churnTest[,Variables])
set.seed(1)
Folds <- 10
datos$kfold <- sample(1:Folds, nrow(datos), replace = T)
iter <- data.frame(iteracion = NULL, aciertos = NULL)
for(i in 1:Folds) {
Test <- subset(datos, kfold == i)
Entrenamiento <- subset(datos, !kfold == i)
Modelo <- rpart(churn ~., data = Entrenamiento)
Prediccion <- predict(Modelo, Test, type = "class")
MC <- table(Test[,"churn"], Prediccion)
Aciertos <- MC[1,1]/ (MC[1,1] + MC[2,1])
Iter <- rbind(Iter, data.frame(iter = i, acierto = Aciertos))
}
iter <- data.frame(iteracion = NULL, aciertos = NULL)
for(i in 1:Folds) {
Test <- subset(datos, kfold == i)
Entrenamiento <- subset(datos, !kfold == i)
Modelo <- rpart(churn ~., data = Entrenamiento)
Prediccion <- predict(Modelo, Test, type = "class")
MC <- table(Test[,"churn"], Prediccion)
Aciertos <- MC[1,1]/ (MC[1,1] + MC[2,1])
Iter <- rbind(Iter, data.frame(Iter = i, acierto = Aciertos))
}
iter <- data.frame(iteracion = NULL, aciertos = NULL)
Iter <- data.frame(iteracion = NULL, aciertos = NULL)
for(i in 1:Folds) {
Test <- subset(datos, kfold == i)
Entrenamiento <- subset(datos, !kfold == i)
Modelo <- rpart(churn ~., data = Entrenamiento)
Prediccion <- predict(Modelo, Test, type = "class")
MC <- table(Test[,"churn"], Prediccion)
Aciertos <- MC[1,1]/ (MC[1,1] + MC[2,1])
Iter <- rbind(Iter, data.frame(Iter = i, acierto = Aciertos))
}
Iter
promedio <- format(mean(Iter$acierto, na.rm = TRUE)*100, digits = 4)
plot(Iter, type = "b", main = "% Prediccion en Cada Iteracion", cex.axis = .7, cex.lab = .7, cex.main = 8,
xlab = "No de iteraciones", ylab = "% Prediccion")
abline(h = mean(Iter$acierto), col="blue", lty=2)
legend("topright", legend = paste("Eficiencia de prediccion =", promedio, "%"), col="blue", lty = 2, lwd = 1, cex = .7, bg = NULL)
plot(Iter, type = "b", main = "% Prediccion en Cada Iteracion", cex.axis = .7, cex.lab = .7, cex.main = .8,
xlab = "No de iteraciones", ylab = "% Prediccion")
abline(h = mean(Iter$acierto), col="blue", lty=2)
legend("topright", legend = paste("Eficiencia de prediccion =", promedio, "%"), col="blue", lty = 2, lwd = 1, cex = .7, bg = NULL)
load("Regresion Lineal/psub(1).RData")
summary(psub)
model <- lm(log(PINCP, base = 10) ~ AGEP + SEX + COW + SCHL, data = dtrain)
load("psub(1).RData")
load("Regresion Lineal/psub(1).RData")
dtra    dtrain <- subset(psub, ORIGRANDGROUP >= 500)
dtest <- subset(psub, ORIGRANDGROUP < 500)
dtrain <- subset(psub, ORIGRANDGROUP >= 500)
dtest <- subset(psub, ORIGRANDGROUP < 500)
model <- lm(log(PINCP, base = 10) ~ AGEP + SEX + COW + SCHL, data = dtrain)
dtest$predLogPINCP <- prdict(model, newdata = dtest)
dtest$predLogPINCP <- predict(model, newdata = dtest)
dtrain$predLogPINCP <- predict(model, newdata = dtrain)
ggplot(data=dtest,aes(x=predLogPINCP,y=log(PINCP,base=10)))
+ geom_point(alpha=0.2,color="black")
+ geom_smooth(aes(x=predLogPINCP, y=log(PINCP,base=10)),color="black")
+ geom_line(aes(x=log(PINCP,base=10), y=log(PINCP,base=10)),color="blue",linetype=2)
+ scale_x_continuous(limits=c(4,5)) + scale_y_continuous(limits=c(3.5,5.5))
library(ggplot2)
ggplot(data=dtest,aes(x=predLogPINCP,y=log(PINCP,base=10)))
+ geom_point(alpha=0.2,color="black")
+ geom_smooth(aes(x=predLogPINCP, y=log(PINCP,base=10)),color="black")
+ geom_line(aes(x=log(PINCP,base=10), y=log(PINCP,base=10)),color="blue",linetype=2)
+ scale_x_continuous(limits=c(4,5)) + scale_y_continuous(limits=c(3.5,5.5))
ggplot(data=dtest,aes(x=predLogPINCP,y=log(PINCP,base=10)))
+ geom_point(alpha=0.2,color="black")
+ geom_smooth(aes(x=predLogPINCP, y=log(PINCP,base=10)),color="black")
+ geom_line(aes(x=log(PINCP,base=10), y=log(PINCP,base=10)),color="blue",linetype=2)
ggplot(data=dtest,aes(x=predLogPINCP,y=log(PINCP,base=10)))
+ geom_point(alpha=0.2,color="black")
ggplot(data=dtest,aes(x=predLogPINCP,y=log(PINCP,base=10))) + geom_point(alpha=0.2,color="black")
ggplot(data=dtest,aes(x=predLogPINCP,y=log(PINCP,base=10))) +
geom_point(alpha=0.2,color="black")
ggplot(data=dtest,aes(x=predLogPINCP,y=log(PINCP,base=10))) +
geom_point(alpha=0.2,color="black") +
geom_smooth(aes(x=predLogPINCP, y=log(PINCP,base=10)),color="black") +
geom_line(aes(x=log(PINCP,base=10), y=log(PINCP,base=10)),color="blue",linetype=2) +
scale_x_continuous(limits=c(4,5)) + scale_y_continuous(limits=c(3.5,5.5))
ggplot(data=dtest,aes(x=predLogPINCP,y=log(PINCP,base=10))) +
# Pintar los puntos de cada x & y
geom_point(alpha=0.2,color="black") +
geom_smooth(aes(x=predLogPINCP, y=log(PINCP,base=10)),color="black") +
geom_line(aes(x=log(PINCP,base=10), y=log(PINCP,base=10)),color="blue",linetype=2) +
scale_x_continuous(limits=c(4,5)) + scale_y_continuous(limits=c(3.5,5.5))
# Pintar la linea que se ajusta a esos puntos
geom_smooth(aes(x=predLogPINCP, y=log(PINCP,base=10)),color="green") +
asdas
ggplot(data=dtest,aes(x=predLogPINCP,y=log(PINCP,base=10))) +
# Pintar los puntos de cada x & y
geom_point(alpha=0.2,color="black") +
# Pintar la linea que se ajusta a esos puntos
geom_smooth(aes(x=predLogPINCP, y=log(PINCP,base=10)),color="green") +
geom_line(aes(x=log(PINCP,base=10), y=log(PINCP,base=10)),color="blue",linetype=2) +
scale_x_continuous(limits=c(4,5)) + scale_y_continuous(limits=c(3.5,5.5))
# Graficar en x la prediccion y en Y el valor real
ggplot(data=dtest,aes(x=predLogPINCP,y=log(PINCP,base=10))) +
# Pintar los puntos de cada x & y
geom_point(alpha=0.2,color="black") +
# Pintar la linea que se ajusta a esos puntos
geom_smooth(aes(x=predLogPINCP, y=log(PINCP,base=10)),color="green") +
# Pintar la linea que intersecta a ese modelo, creo que esta es la linea del valor real
geom_line(aes(x=log(PINCP,base=10), y=log(PINCP,base=10)),color="red",linetype=2) +
# Recortar la grafica
scale_x_continuous(limits=c(4,5)) + scale_y_continuous(limits=c(3.5,5.5))
ggplot(data=dtest,aes(x=predLogPINCP,y=log(PINCP,base=10)))
ggplot(data=dtest,aes(x=predLogPINCP,y=log(PINCP,base=10))) +
# Pintar los puntos de cada x & y
geom_point(alpha=0.2,color="black")
ggplot(data=dtest,aes(x=predLogPINCP,y=log(PINCP,base=10))) +
# Pintar los puntos de cada x & y
geom_point(alpha=0.2,color="black") +
# Pintar la linea que se ajusta a esos puntos
geom_smooth(aes(x=predLogPINCP, y=log(PINCP,base=10)),color="green") +
;
ggplot(data=dtest,aes(x=predLogPINCP,y=log(PINCP,base=10))) +
# Pintar los puntos de cada x & y
geom_point(alpha=0.2,color="black") +
# Pintar la linea que se ajusta a esos puntos
geom_smooth(aes(x=predLogPINCP, y=log(PINCP,base=10)),color="green")
ggplot(data=dtest,aes(x=predLogPINCP,y=predLogPINCP-log(PINCP,base=10))) +
geom_point(alpha=0.2,color="black") +
geom_smooth(aes(x=predLogPINCP,y=predLogPINCP-log(PINCP,base=10)),color="black")
rsq <- function(y,f) {
1 - sum((y-f)^2) / sum((y-mean(y))^2)
}
rsq(log(dtrain$PINCP, base=10), predict(model, newdata = dtrain))
rsq(log(dtest$PINCP, base=10), predict(model, newdata = dtest))
coefficients(model)
